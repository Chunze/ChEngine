#include "ParticleSystem.h"
#include "glm.h"

ParticleSystem::ParticleSystem(GameContext* gameContext, World* world)
	: GameObject(gameContext, world)
{

}

void ParticleSystem::Update(float Delta)
{
	m_gameContext->GetDrawList()->AddToDrawQ(e, false);
}

void ParticleSystem::Initialize(int Num_Particles)
{
	ParticleTotalNumber = Num_Particles;
	particlePositions = new glm::vec2[ParticleTotalNumber];
	VertexBuffer = new float[ParticleTotalNumber * 5];

	// For testing
	for (int i = 0; i < ParticleTotalNumber; i++)
	{
		particlePositions[i] = glm::vec2(0.0f, 0.0f);
	}

	e.attributeSizes.push_back(2);
	e.attributeSizes.push_back(3);
	e.drawingPrimitive = DrawingPrimitives::POINTS;
	e.PointSize = 1;
	e.shader = *(new Shader("ScreenSpaceParticle.vert", "ScreenSpaceParticle.frag"));
	e.vertextInfoSize = 5;
	e.bIsDebug = true;
	static float v[] = 
	{
		10.0f, 10.0f, 1.0f, 1.0f, 1.0f
	};

	e.vertexBuffer = v;
	e.VBsize_inByte = sizeof(v);
}
